data = [3,1033,1008,1033,1,1032,1005,1032,31,1008,1033,2,1032,1005,1032,58,1008,1033,3,1032,1005,1032,81,1008,1033,4,1032,1005,1032,104,99,102,1,1034,1039,1001,1036,0,1041,1001,1035,-1,1040,1008,1038,0,1043,102,-1,1043,1032,1,1037,1032,1042,1106,0,124,1001,1034,0,1039,102,1,1036,1041,1001,1035,1,1040,1008,1038,0,1043,1,1037,1038,1042,1106,0,124,1001,1034,-1,1039,1008,1036,0,1041,1002,1035,1,1040,102,1,1038,1043,1002,1037,1,1042,1106,0,124,1001,1034,1,1039,1008,1036,0,1041,1001,1035,0,1040,1001,1038,0,1043,1002,1037,1,1042,1006,1039,217,1006,1040,217,1008,1039,40,1032,1005,1032,217,1008,1040,40,1032,1005,1032,217,1008,1039,7,1032,1006,1032,165,1008,1040,33,1032,1006,1032,165,1101,2,0,1044,1105,1,224,2,1041,1043,1032,1006,1032,179,1102,1,1,1044,1105,1,224,1,1041,1043,1032,1006,1032,217,1,1042,1043,1032,1001,1032,-1,1032,1002,1032,39,1032,1,1032,1039,1032,101,-1,1032,1032,101,252,1032,211,1007,0,60,1044,1105,1,224,1101,0,0,1044,1106,0,224,1006,1044,247,101,0,1039,1034,101,0,1040,1035,1002,1041,1,1036,1002,1043,1,1038,101,0,1042,1037,4,1044,1105,1,0,92,17,17,33,88,37,85,63,23,14,79,46,37,69,8,6,63,55,61,21,86,19,37,78,49,15,54,28,54,94,91,14,11,40,56,96,20,20,82,28,12,91,68,43,18,63,16,82,71,8,83,88,25,79,67,26,55,33,51,74,68,59,64,58,78,30,65,64,9,48,87,26,85,32,82,92,21,34,99,1,20,66,34,85,65,58,87,12,21,13,51,90,54,19,12,85,3,88,47,31,93,95,49,70,95,55,7,67,2,92,42,80,88,42,24,91,2,59,41,41,70,89,42,83,43,92,44,93,62,26,63,99,81,35,98,70,71,79,8,90,26,66,94,22,47,55,90,93,6,87,92,88,40,73,40,97,14,73,90,31,92,16,35,93,36,27,69,57,97,80,34,58,42,95,34,9,93,22,94,45,79,32,33,90,72,77,58,29,63,56,95,37,61,58,51,57,8,25,86,75,25,63,64,93,57,7,79,85,57,53,97,16,63,40,71,52,23,33,75,13,56,65,90,26,12,66,93,26,36,64,30,10,75,18,77,76,86,33,98,4,23,52,64,66,82,38,90,17,63,94,24,97,20,92,70,63,80,19,73,8,74,93,16,98,77,52,38,90,46,49,76,84,53,50,22,93,19,16,61,47,54,67,56,78,21,77,52,88,4,64,91,90,10,97,10,51,89,15,57,97,22,79,59,92,17,84,71,30,96,58,82,52,93,48,20,62,4,89,64,53,85,37,92,52,89,43,80,86,2,41,81,53,53,82,77,31,66,92,31,44,81,14,49,96,66,42,91,2,61,82,36,32,90,8,61,32,67,52,25,81,15,63,27,59,61,1,15,88,87,62,10,85,47,75,24,46,63,24,77,34,73,34,45,71,10,96,46,43,75,31,23,72,37,87,57,88,63,30,6,86,91,16,53,16,89,81,11,32,75,22,82,69,50,88,53,67,50,65,67,26,81,83,20,14,23,89,98,57,64,3,79,7,69,89,57,1,61,65,14,52,76,66,83,3,57,90,82,53,13,72,94,37,26,97,77,32,53,43,78,22,36,65,83,98,55,82,58,48,24,68,92,18,22,90,65,28,81,33,63,79,3,31,65,92,53,46,74,7,80,37,79,79,83,42,82,84,33,21,79,79,21,81,55,4,95,10,53,84,14,25,86,65,24,74,53,26,61,47,19,66,86,58,99,37,83,35,46,3,11,89,27,66,53,33,67,8,95,44,45,70,71,65,59,49,77,25,3,56,83,39,91,3,52,86,67,57,99,86,40,39,3,99,25,69,94,93,62,36,37,91,17,26,80,98,77,15,5,90,25,40,69,11,85,66,56,40,83,61,10,85,33,28,86,26,41,61,4,86,78,20,71,78,47,94,39,92,26,61,91,52,69,20,47,45,99,38,96,39,98,76,58,28,94,27,47,97,2,45,54,64,94,98,27,69,54,23,72,89,96,22,58,21,16,79,28,45,55,78,75,15,92,67,10,81,80,64,61,13,30,98,65,57,35,4,22,96,72,92,47,51,87,33,78,26,83,20,5,93,22,73,83,68,24,17,61,69,39,62,53,20,95,84,53,83,36,48,99,33,13,42,90,97,87,9,55,64,34,94,7,78,62,42,43,83,54,82,57,24,36,98,95,54,63,75,52,15,40,92,87,77,5,13,93,48,82,71,65,97,96,1,3,68,49,97,9,77,88,99,25,78,4,84,97,77,4,92,91,76,53,71,58,64,55,68,97,96,48,99,2,86,51,69,15,72,42,72,44,86,55,73,0,0,21,21,1,10,1,0,0,0,0,0,0]

for i in range(100000):
  data.append(0)

backtrack = {1:2, 2:1, 3:4, 4:3}
time = 0

def recur(x, y, i, relative_base, depth, previous):
  clear.remove((x, y))
  changed = False
  for direction in range(1, 5):
    if direction == previous:
      continue
    if direction == 1:
      new_pos = (x, y + 1)
    elif direction == 2:
      new_pos = (x, y - 1)
    elif direction == 3:
      new_pos = (x - 1, y)
    else:
      new_pos = (x + 1, y)
    if new_pos in walls or new_pos not in clear:
      continue
    changed = True
    result, new_i, new_relative_base = move(direction, i, relative_base)
    if result != 0:
      recur(new_pos[0], new_pos[1], new_i, new_relative_base, depth + 1, backtrack[direction])
      move(backtrack[direction], i, relative_base)
  if not changed:
    global time
    if depth > time:
      time = depth

def move(direction, i, relative_base):
  while True:
    if data[i] == 1:
      data[data[i + 3]] = data[data[i + 1]] + data[data[i + 2]]
      i += 4
    elif data[i] == 2:
      data[data[i + 3]] = data[data[i + 1]] * data[data[i + 2]]
      i += 4
    elif data[i] == 3:
      data[data[i + 1]] = direction
      i += 2
    elif data[i] == 4:
      return data[data[i + 1]], i + 2, relative_base
    elif data[i] == 5:
      if data[data[i + 1]] != 0:
        i = data[data[i + 2]]
      else:
        i += 3
    elif data[i] == 6:
      if data[data[i + 1]] == 0:
        i = data[data[i + 2]]
      else:
        i += 3
    elif data[i] == 7:
      if data[data[i + 1]] < data[data[i + 2]]:
        data[data[i + 3]] = 1
      else:
        data[data[i + 3]] = 0
      i += 4
    elif data[i] == 8:
      if data[data[i + 1]] == data[data[i + 2]]:
        data[data[i + 3]] = 1
      else:
        data[data[i + 3]] = 0
      i += 4
    elif data[i] == 9:
      relative_base += data[data[i + 1]]
      i += 2
    elif data[i] == 99:
      # break
      return
    else:
      opcode = int(str(data[i])[:-3:-1][::-1])
      if opcode == 1 or opcode == 2:
        one = 0
        two = 0
        three = 0
        if len(str(data[i])) > 4:
          three = int(str(data[i])[-5])
        if len(str(data[i])) > 3:
          two = int(str(data[i])[-4])
        if len(str(data[i])) > 2:
          one = int(str(data[i])[-3])
        num_one = 0
        num_two = 0
        num_three = 0
        if one == 0:
          num_one = data[data[i + 1]]
        elif one == 1:
          num_one = data[i + 1]
        else:
          num_one = data[relative_base + data[i + 1]]
        if two == 0:
          num_two = data[data[i + 2]]
        elif two == 1:
          num_two = data[i + 2]
        else:
          num_two = data[relative_base + data[i + 2]]
        if three == 0:
          num_three = data[i + 3]
        else:
          num_three = relative_base + data[i + 3]
        if opcode == 1:
          result = num_one + num_two
        elif opcode == 2:
          result = num_one * num_two
        data[num_three] = result
        i += 4
      elif opcode == 3 or opcode == 4:
        one = 0
        if len(str(data[i])) > 2:
          one = int(str(data[i])[-3])
        num_one = 0
        if one == 0 or one == 1:
          num_one = data[i + 1]
        else:
          num_one = relative_base + data[i + 1]
        if opcode == 3:
          if one == 1:
            num_one = direction
          else:
            data[num_one] = direction
        elif opcode == 4:
          if one == 1:
            position = num_one
          else:
            position = data[num_one]
          return position, i + 2, relative_base
        i += 2
      elif opcode == 5 or opcode == 6:
        one = 0
        two = 0
        if len(str(data[i])) > 3:
          two = int(str(data[i])[-4])
        if len(str(data[i])) > 2:
          one = int(str(data[i])[-3])
        num_one = 0
        num_two = 0
        if one == 0:
          num_one = data[data[i + 1]]
        elif one == 1:
          num_one = data[i + 1]
        else:
          num_one = data[relative_base + data[i + 1]]
        if two == 0:
          num_two = data[data[i + 2]]
        elif two == 1:
          num_two = data[i + 2]
        else:
          num_two = data[relative_base + data[i + 2]]
        if opcode == 5:
          if num_one != 0:
            i = num_two
          else:
            i += 3
        elif opcode == 6:
          if num_one == 0:
            i = num_two
          else:
            i += 3
      elif opcode == 7 or opcode == 8:
        one = 0
        two = 0
        three = 0
        if len(str(data[i])) > 4:
          three = int(str(data[i])[-5])
        if len(str(data[i])) > 3:
          two = int(str(data[i])[-4])
        if len(str(data[i])) > 2:
          one = int(str(data[i])[-3])
        num_one = 0
        num_two = 0
        num_three = 0
        if one == 0:
          num_one = data[data[i + 1]]
        elif one == 1:
          num_one = data[i + 1]
        else:
          num_one = data[relative_base + data[i + 1]]
        if two == 0:
          num_two = data[data[i + 2]]
        elif two == 1:
          num_two = data[i + 2]
        else:
          num_two = data[relative_base + data[i + 2]]
        if three == 0:
          num_three = data[i + 3]
        else:
          num_three = relative_base + data[i + 3]
        if opcode == 7:
          if num_one < num_two:
            data[num_three] = 1
          else:
            data[num_three] = 0
        elif opcode == 8:
          if num_one == num_two:
            data[num_three] = 1
          else:
            data[num_three] = 0
        i += 4
      elif opcode == 9:
        one = 0
        if len(str(data[i])) > 2:
          one = int(str(data[i])[-3])
        num_one = 0
        if one == 0:
          num_one = data[data[i + 1]]
        elif one == 1:
          num_one = data[i + 1]
        else:
          num_one = data[relative_base + data[i + 1]]
        relative_base += num_one
        i += 2
      else:
        i += 1

walls = {(-7, -3), (7, 3), (19, 4), (18, 19), (7, -15), (-21, -8), (-7, 15), (17, -6), (-17, 4), (8, 5), (3, -17), (-9, -2), (-9, -1), (-5, 1), (-3, 17),(-1, 14), (-10, -5), (10, 7), (1, -15), (-3, 11), (0, 17), (3, -11), (14, 1), (-1, 16), (13, -13), (-13, 13), (15, -13), (-15, 13), (9, -19), (-9, 19), (11, -15), (-11, 15), (-4, -3), (-9, 9), (9, -9), (-19, -13), (-17, -13), (17, 13), (-8, 21), (-7, 16), (-21, -15), (-17, 13), (-19, 13), (17, -13), (19, -13), (16, -1), (-9, -9), (9, 9), (-4, 1), (4, -7), (-11, -15), (11, 15), (9, 19), (-16, 7), (0, -9), (1, 21), (-15, -13), (15, 13), (-13, -13), (13, 13), (-15, 6), (12, -19), (-12, 21), (14, -7), (0, -19), (-3, -11), (3, 11), (1, 15), (-11, 8), (11, -10), (10, -5), (-10, 7), (5, 1), (-3, -17), (3, 17), (16, 7), (19, 18), (17, 6), (-7, -15), (7, 15), (-21, 4), (-20, -19), (-20, 7), (-21, -10), (-17, 10), (19, -8), (7, -3), (-7, 3), (-10, -11), (10, 9), (11, 4), (-11, -6), (9, 20), (10, 19), (-15, -12), (-13, -8), (13, 6), (0, 5), (-16, -11), (11, -17), (1, 0), (-13, 1), (-11, 17), (15, -17), (4, 11), (-15, 17), (-1, -5), (-2, -5), (2,7), (-7, -6), (17, -19), (-17, 19), (19, 1), (-17, -17), (17, 17), (-8, 9), (7, -6), (-6, 3), (-5, 10), (-2, 5), (-1, 5), (2, -7), (15, 19), (1, -1), (1, -2), (-11, -19), (11, 19), (0, -5), (-16, 11), (15, -12), (10, -19), (-12, 1), (12, -7), (14, -19), (-14, 17), (-10, 11), (16, 11), (19, 6), (-21, 8), (17, 10), (-18, 7), (-20, -7), (-18, -19), (-20, 19), (-7, 13), (-21, -6), (17, -8), (7, -13), (-9, -8), (-5, 3), (5, -3), (10, 5), (1, -9), (-3, 9), (0, 19), (3, -9), (-14, -5), (1, 18), (-13, 15), (15, 6), (15, -3), (13, 18), (13, -15), (-15, 3), (-16, -7), (-3, -6), (11, -13), (-11, 13), (4, 7), (10, -1), (-5, -8), (-9, 11), (9, -11), (6, 21), (-19, -15), (19, 15), (-17, -3), (-21, 1), (17, 3), (-21, -13), (17, -15), (-19, 11), (-17, 15), (19, -11), (-6, 21), (-9, -15), (9, 15), (4, -5), (11, 1), (-3, 2), (-9, -17), (9, 17), (3, -4), (-13, 20), (-15, -15), (-15, 4), (-13, -11), (13, 11), (15, 15), (12, -17), (-14, 3), (0, -17), (-3,-13), (3, 13), (1, 13), (-10, 5), (-5, -15), (9, -1), (-3, -19), (3, 19), (5, 15), (9, -2), (19, 20), (-21, 6), (-7, -9), (-17, -6), (17, 4), (-20, -17), (-18, 17), (7, 9), (18, -19), (19, -6), (16, -9), (5, -17), (-5,17), (-7, 1), (-14, -19), (12, 1), (-10, -19), (15, 20), (1, -5), (-16, -9), (0, 7), (-13, 3), (-1, -7), (-5, -10), (-6, -5), (6, 7), (5, 18), (-8, -7), (-19, -3), (19, 3), (-8, 11), (18, -1), (7, -12), (9, 3), (-9, -3), (-1, 11), (11, 21), (-3, 14), (-14, -1), (0, -3), (-16, 13), (13, -10), (-12, 3), (-14, 15), (3, 1), (11, -4), (16, 13), (-19, -10), (19, 8), (-21, 10), (7, 21), (17, 8), (-18, 5), (7, -19), (-21, -4), (17, -1), (-7,19), (19, -18), (-17, 0), (16, -5), (5, -5), (-5, 5), (1, -11), (-11, -12), (3, -7), (0, 21), (-3, 7), (-14, -7), (11, 10), (12, 13), (13, -17), (-15, -1), (15, 0), (-13, 17), (1, -17), (13, 16), (-15, 1), (0, 11), (-3, -8), (-11, 11), (3, 6), (11, -11), (-5, -6), (9, -5), (5, 4), (-9, 5), (-19, -17), (19, 17), (17, 1), (7, 18), (-8, -19), (-7, 20), (-21, -11), (-17, 9), (-19, 9), (17, -9), (19, -9), (6, -17), (-9, -13), (9, 13), (-11, -3), (3, -1), (11, 3), (-15, -9), (15, 9), (-13, -9), (13, 9), (-12, 17), (14, -3), (3, 15), (1, 3), (-1, -12), (-5, -13), (5, 13), (-6, -1), (-7, -11), (7, 11), (-20, 3), (16, 17), (-19, 2), (19, -4), (5, -19), (-5,19), (-7, 7), (7, -7), (5, -9), (-5, 9), (-12, -5), (12, 3), (1, -7), (1, 4), (-13, 5), (13, -5), (-15, 21), (2, 3), (-11, 7), (11, -7), (6, 5), (-7, -2), (-7, -1), (-5, -18), (7, 0), (5, 16), (-19, -5), (19, 5), (17, 21), (-17, 5), (17, -5), (-19, 21), (-4, 19), (6, -13), (9, 1), (5, -16),(-5, 14), (2, -11), (-1, 9), (4, -15), (1, -14), (-3, 12), (-1, 19), (-2, 19), (-13, 10), (-15, -5), (15, 5), (13, 21), (-10, 21), (15, -16), (-12, 13), (-14, 13), (3, 3), (-11, 0), (-3, -3), (11, -1), (10, -13), (-9, 14), (8, -15), (-19, -12), (19, 10), (-17, -16), (-21, 12), (-18, 11), (-18, -15), (18, 13), (-20, 15), (7, -17), (-21, -1), (-21, -2), (-7, 17), (19, -16), (8, 11), (-17, 2), (16, -3), (5, -7), (-5, 7), (8, 17), (-11, -14), (-3, 5), (3, -5), (14, 11), (-12, -9), (13, -19), (-15, -4), (15, -7), (-13, -16), (1, -19), (2, 21), (-13, 19), (-16, -3), (0, 13), (-15, 7), (13, 14), (-11, 9), (1, 8), (11, -9), (4, 3), (-1, -13), (2, 15), (5, 2), (-9, 7), (9, -7), (-5, -4), (6, 9), (-19, -19), (-17, -7), (7, 12), (17, 7), (-21, 5), (-21, -9), (-17, 11), (-19, 7), (17, -11), (19, -7), (6, -19), (-6, 17), (-11, -5), (11, 5), (-15, -11), (15, 11), (-13, -7), (13, 7), (-16, 19), (-11, 18), (1, 1), (-5, -11), (5, 11), (-7, -5), (7, 5), (5, 21), (-18, 21), (-17, 16), (-19, 0), (19, -2), (-21, 16), (-5, 21),(-7, 5), (7, -5), (5, -11), (-5, 11), (14, 21), (-15, -18), (-13, -1), (-13, -2), (11, 16), (13, -7), (-13, 7), (-15, 11), (15, -11), (2, 1), (-1, -3), (-9, 21), (-11, 5), (11, -5), (7, 2), (-8, -3), (-19, -7), (19, 7), (-17, -11), (17, 11), (-21, 9), (7, -16), (-17, 7), (-21, -5), (-7, 14), (-19, 19), (17, -7), (-6, 13), (3, -18), (-9, -7), (-3, 16), (9, 7), (5, -1), (5, -2), (-1, 15), (-5, 0), (4, -13), (1, -16), (-11, -9), (3, -12), (-3, 10), (11, 9), (2, -19), (1, 19), (-1, 17), (-15, -7), (-13, 12), (-13, -19), (13, 19), (15, 7), (-12, 15), (13, -14), (14, -9), (-9, 18), (-3, -5), (3, 5), (8, -19), (10, -15), (-10, 13), (-5, -7), (5, 7), (9, -10), (19, 12), (-17, -14), (-7, -17), (7, 17), (-21, 14), (-18, -9), (-21, -16), (17, -14), (-19, 12), (19, -14), (9, 8), (-3, 3), (3, -3), (14, 9), (15, -5), (-13, -14), (-15, 5), (-1, -17), (-2, -17), (3, 10), (-4, -11), (4, 13), (-2, -15), (-1, -15), (2, 13), (-5, -1), (-9, 1), (3, 16), (5, 0), (-6, -13), (6, 15), (-17, -5), (-7, -16), (17, 5), (-17, 21), (-19, 5), (19, -5), (-8, 3), (-7, 2), (7, -4), (-11, -7), (11, 7), (-2, 3), (-1, 3), (-13, -5), (13, 5), (-16, 21), (1, 7), (13, -1), (13, -2), (-15, 16), (-1, -8), (-5, -9), (5, 9), (-7, -7), (7, 7), (5, 19), (16, 21), (-21, -18), (-17, 18), (-19, -1), (-19, -2), (-21, 18), (17, 16), (16, -19),(19, 0), (-20, 21), (7, -11), (-7, 11), (-3, 21), (5, -13), (-5, 13), (-1, 10), (15, 18), (1, -3), (11, 18), (3, -15), (-16, -19), (-3, 15), (-12, -19), (12, 21), (13, -9), (-13, 9), (15, -9), (-15, 9), (-11, 3), (11, -3), (9, -13), (-9, 13), (-19, -9), (19, 9), (-17, -9), (-21, 11), (17, 9), (-8, 17), (7, -14), (-21, -3), (-7, 12), (-19, 17), (19, -17), (-17, 1), (6, -9), (-9, -5), (9, 5), (2, -15), (-10, -1), (-4, 5), (4, -3), (-2,13), (-1, 13), (-11, -11), (11, 11), (-3, 8), (3, -10), (1, 17), (13, -16), (15, 1), (-15, 2), (-13, -17), (13, 17), (-12, 9), (14, -11), (-14, 9), (-3, -7), (3, 7), (1, 11), (-10, 3), (5, 5), (-9, 10), (9, -12), (-5, -5), (16, 3), (19, 14), (-21, 0), (-7, -19), (7, 19), (17, 2), (-18, -11), (-21, -14), (-17, 14), (19, -12), (-9, -16), (9, 14), (10, 13), (8, 21), (-11, -1), (-3, 1), (-9, -18), (11, 0), (-14, -13), (14, 15), (12, 11),(9, 16), (-15, -16), (-13, -12), (-1, -19), (-2, -19), (0, 1), (-16, -15), (-3, -14), (-11, 21), (-2, -9), (-1, -9), (2, 11), (5, 14), (-9, 3), (9, -3), (3, 18), (-6, -15), (-4, -19), (4, 21), (-7, -10), (7, 8), (-8, -13), (-19, 3), (19, -3), (-8, 5), (7, -1), (6, -5), (-6, 7), (-1, 1), (-2, 1), (-13, -3), (13, 3), (1, 5), (13, -4), (-2, -1), (-1, -1), (12, -3),(-12, 5), (-14, 21), (7, 1), (-5, -17), (5, 17), (-19, -4), (19, 2), (-21, 20), (16, -17), (18, 21), (7, -9), (-7, 9), (8, 3), (-3, 19), (9, 2), (5, -15), (-5, 15), (-9, -4), (-1, 8), (1, -13), (3, -13), (-3, 13), (14,3), (0, -1), (-12, -17), (13, -11), (-13, 11), (15, -15), (-15, 15), (9,-17), (-3, -1), (-11, 1), (3, 0), (-3, -2), (-9, 17), (9, -15), (-9, 15), (-6, -19), (-19, -11), (19, 11), (-21, 13), (17, 15), (17, -3), (-17, 3), (-19, 15), (-9, -11), (-5, 4), (9, 11), (-11, -13), (11, 13), (-3, 6),(3, -8), (0, -11), (-1, 21), (-2, 21), (-15, -3), (15, -1), (-13, -15), (15, 3), (13, 15), (12, -13), (-15, 0), (-3, -9), (3, 9), (1, 9), (11, -12), (-10, 1), (-5, -3), (5, 3), (9, -6), (8, -9), (19, 16), (-17, -2), (-7, -13), (-21, 2), (7, 13), (18, -15), (-17, -1), (-18, -5), (-21, -12), (17, -10), (-19, 8), (19, -10), (16, -13), (-9, -14), (9, 12), (-10, -9),(14, 13), (-12, -3), (12, 5), (10, 21), (-13, -10), (13, 8), (-3, -16), (11, -19), (-11, 19), (15, -19), (-4, -15), (-15, 19), (-2, -11), (-1, -11), (3, 20), (8, -1), (-7, -12), (7, 10), (-8, -11), (17, -17), (-17, 17), (-19, 1), (-17, -19), (-21, 17), (17, 19), (-8, 7), (-5, 18), (7, -8), (4, -19), (-4, 21), (-6, 5), (5, -10), (-5, 8), (2, -5), (-1, 7), (-15, -17), (15, 17), (13, 1), (-11, -17), (11, 17), (-16, 9), (13, -6), (10, -17), (-10, 19), (-12, 7), (14, -17), (-14, 19), (11, -8)}

clear = {(-8, -4), (16, 9), (-19, -6), (17, 20), (-8, 14), (-18, 1), (18, -3), (-18, -17), (-20, 17), (-19, 20), (6, -16), (-6, 12), (9, 0), (2, -14), (-2, 14), (4, -14), (-4, 10), (-14, -3), (-16, 0), (0, -16), (-2, 16), (12,17), (-15, -6), (15, 4), (13, 20), (12, -10), (-12, 14), (-14, 10), (14,-10), (3, 2), (-3, -4), (4, 5), (10, -16), (-10, 12), (16, 0), (8, -14),(-20, -10), (-18, 8), (-18, -10), (18, 10), (-20, 8), (7, -18), (18, -12), (8, 12), (16, -2), (5, -8), (-5, 6), (-10, -14), (10, 14), (8, 18), (-3, 4), (3, -6), (-14, -12), (14, 8), (-12, -16), (12, 8), (-13, 18), (15,-8), (-1, -18), (-2, -18), (-16, -1), (-16, -2), (0, 14), (2, 18), (-14,5), (-4, -12), (4, 12), (-1, -16), (-2, -16), (2, 12), (-9, 6), (9, -8),(-6, -14), (6, 14), (8, -7), (-17, -8), (18, -17), (-18, 19), (-18, -7),(-8, -16), (18, 5), (17, -12), (-19, 6), (16, -11), (-8, 2), (-14, -17),(14, 19), (12, 7), (-1, 2), (-2, 2), (2, -2), (2, -1), (-10, -17), (15, 10), (-16, 20), (-4, -13), (-5, -12), (5, 10), (-6, -3), (6, 1), (4, 17),(7, 4), (5, 20), (-8, -9), (16, 20), (-20, 20), (-5, 20), (-7, 4), (4, -17), (8, 0), (5, -12), (4, -11), (-4, 13), (12, 20), (13, -8), (-13, 6), (-15, 10), (-10, 17), (-9, 20), (-11, 4), (11, -6), (10, -9), (-8, -1), (-8, -2), (-6, -18), (6, 18), (-19, -8), (-17, -12), (-8, 16), (18, -5), (18, 17), (-17, 6), (-19, 18), (8, 7), (6, -10), (16, -7), (-6, 10), (9, 6), (2, -16), (-10, -7), (-4, 4), (-2, 12), (-1, 12), (4, -4), (-11, -10),(11, 8), (14, 7), (-16, 2), (0, -14), (12, 19), (-15, -8), (12, -16), (-12, 8), (14, -12), (-14, 8), (0, 9), (3, 4), (8, -18), (-10, 2), (10, -2), (5, 6), (16, 2), (8, -12), (-7, -18), (7, 16), (-20, -16), (-18, 14), (-18, -12), (18, 8), (-20, 10), (18, -14), (8, 14), (16, -16), (-10, -16),(-4, 3), (10, 12), (8, 20), (-14, -14), (14, 14), (-12, -14), (12, 10), (15, -6), (2, 16), (0, 0), (-16, -16), (-4, -10), (4, 14), (-2, -10), (-1, -10), (2, 10), (10, -7), (-9, 0), (-6, -16), (6, 12), (4, 20), (8, -5),(-20, 1), (-8, -14), (18, 3), (-17, 20), (-19, 4), (-8, 4), (6, -6), (-6, 6), (-11, -8), (11, 6), (14, 17), (-12, -7), (-2, 0), (-1, 0), (2, -4),(10, 17), (-13, -6), (13, 4), (1, 6), (-2, -7), (2, 5), (-12, 4), (-14, 20), (5, 8), (12, -4), (4, 19), (-7, -8), (7, 6), (16, -18), (-18, 2), (-20, -4), (18, -2), (18, 20), (-7, 10), (-4, 17), (8, 2), (-6, 1), (6, -3), (-3, 20), (5, -14), (-5, 12), (2, -9), (-2, 11), (4, -9), (-4, 15), (1,-4), (3, -16), (-16, -18), (-14, -2), (14, 2), (-12, -18), (-13, 8), (-15, 8), (15, -10), (12, -5), (14, -13), (-11, 2), (-10, 9), (10, -11), (9,-14), (-9, 12), (6, 16), (-17, -10), (-8, 18), (-20, -5), (18, -7), (-18, -13), (-20, 13), (18, 15), (17, -2), (-19, 16), (8, 9), (6, -12), (-6, 8), (-9, -6), (9, 4), (10, 3), (4, -1), (4, -2), (-4, 6), (14, 5), (-16, 4), (-12, -11), (0, -12), (1, 16), (-1, 20), (-15, -2), (-2, 20), (-13, -18), (12, -14), (-16, -5), (14, -6), (-12, 10), (-14, 6), (1, 10), (4, 1), (-10, 0), (-4, -7), (10, -4), (16, 4), (-6, -9), (8, -10), (6, 11), (-20, -14), (18, -16), (-20, 4), (-18, -6), (18, 6), (-18, 12), (-6, 19), (16, -14), (-10, -10), (10, 10), (-3, 0), (3, -2), (-14, -16), (14, 12), (-12, -4), (12, 4), (10, 20), (0, 2), (-14, 1), (-16, -14), (-16, 17), (-11, 20), (-4, -16), (4, 8), (-2, -12), (2, 8), (-9, 2), (9, -4), (-6, -2), (8, -3), (-4, -18), (6, 2), (-18, -3), (-8, -12), (18, 1), (-8, 6), (-4, 20), (6, -8), (-6, 4), (2, -6), (-1, 6), (-2, 6), (-13, -4), (13, 2), (0,-8), (-16, 8), (10, -18), (-10, 18), (12, -1), (12, -2), (14, -18), (-14, 18), (-12, 6), (-6, -7), (-8, -5), (16, 8), (-8, 13), (-18, 0), (-20, -2), (-20, -1), (-18, -18), (18, -4), (7, -10), (-7, 8), (-20, 16), (18, 18), (8, 4), (-6, 15), (-3, 18), (-2, 9), (-10, -6), (-4, 9), (10, 6), (3,-14), (0, 16), (-14, -4), (14, 0), (-16, 15), (2, -17), (12, 16), (13, -12), (-15, 14), (12, -11), (14, -15), (9, -18), (-9, 16), (11, -2), (-4, -4), (4, 4), (-10, 15), (9, -16), (16, 15), (17, 14), (-8, 20), (-20, -11), (18, -9), (17, -4), (-19, 14), (-9, -12), (9, 10), (-10, -3), (-4, 0),(4, -8), (10, 1), (11, 12), (-14, -9), (-16, 6), (0, -10), (12, 15), (15, 2), (-12, 20), (14, -8), (-14, 4), (-3, -10), (3, 8), (-4, -5), (-10, 6), (-2, -13), (10, -6), (16, 6), (-6, -11), (8, -8), (-7, -14), (18, -18), (-18, 18), (-20, 6), (-8, -17), (-18, -8), (18, 4), (16, -12), (-8, 1),(-10, -12), (10, 8), (-14, -18), (14, 18), (-12, -2), (-12, -1), (-10, -18), (10, 18), (12, 6), (-12, 19), (0, 4), (-16, -12), (-15, 18), (-4, -14), (4, 10), (-1, -6), (-2, -6), (2, 6), (-6, -4), (6, 0), (4, 16), (-8, -10), (16, 19), (17, -18), (17, 18), (-8, 8), (4, -18), (-6, 2), (6, -2),(6, -1), (-2, 4), (-1, 4), (2, -8), (4, -12), (-4, 12), (13, 0), (15, 16), (-11, -18), (0, -6), (-16, 10), (-10, 16), (-2, -3), (-12, 0), (12, -8), (-14, 16), (-10, 10), (10, -10), (-7, -4), (16, 10), (-8, 15), (-18, 6), (-20, -8), (-20, 18), (18, 16), (18, -6), (8, 6), (6, -15), (16, -8), (2, -13), (-10, -8), (10, 4), (-2, 15), (-4, 11), (0, 18), (-14, -6), (-16, 1), (0, -15), (-2, 17), (12, 18), (14, 6), (15, -14), (-15, 12), (12, -9), (-16, -8), (-14, 11), (0, 8), (11, -16), (-11, 14), (-4, -1), (-4, -2), (4, 6), (-9, 8), (16, 1), (6, 20), (8, -13), (-19, -14), (17, 12), (-20, -9), (-18, 9), (18, 11), (-20, 9), (18, -11), (-17, 12), (8, 13), (-6, 20), (-9, -10), (-10, -13), (-4, 2), (4, -6), (8, 19), (10, 15), (-11, -16), (11, 14), (9, 18), (-14, -11), (-12, -15), (12, 9), (1, 20), (-15, -14), (15, 12), (13, 12), (2, 19), (12, -18), (0, 15), (-14, 2), (14, -2), (0, -18), (-3, -12), (14, -1), (1, 14), (-10, 4), (10, -8), (-5, -2), (-3, -18), (8, -6), (7, 14), (-20, -18), (-18, 16), (-18, -2), (-18, -1), (-8, -15), (-20, 0), (18, 2), (16, -10), (14, 16), (-12, -8), (12, 0), (10, 16), (-16, -10), (0, 6), (11, -18), (-11, 16), (-13, 0), (15, -18), (-2, -8), (2, 4), (-6, -6), (6, 6), (4, 18), (-8, -8), (-17, -18), (-8, 10), (-4, 16), (8, 1), (-6, 0), (6, -4), (2, -10), (-2, 10), (4, -10), (-4, 14), (0, -4), (-16, 12), (-12, 2), (12, -6), (14, -14), (-14, 14), (-10, 8), (10, -12), (16, 12), (-6, -17), (6, 19), (-18, 4), (-20, -6), (-18, -14), (-20, 12), (18, 14), (18, -8), (8, 8), (-6, 11), (16, -6), (-5, 2), (5, -4), (-10, -2), (10, 2), (1, -10), (0, 20), (-14, -8), (-16, 3), (-12, -12), (0, -13), (12, 12), (-13, 14), (14, 4), (15, -4), (12, -15), (-16, -6), (0, 10), (11, -14), (-11, 12), (8, -17), (4, 0), (-4, -8), (-6, -10), (8, -11), (6, 10), (-19, -16), (-17, -4), (-20, -15), (-18, 15), (18,9), (-20, 11), (18, -13), (17, -16), (-19, 10), (8, 15), (6, -18), (16, -15), (-6, 18), (-10, -15), (-11, -2), (-12, -13), (15, 14), (13, 10), (2, 17), (-12, 16), (-14, 0), (14, -4), (-16, 16), (3, 12), (1, 12), (-4, -9), (4, 15), (-5, -16), (6, 13), (8, -4), (-18, -4), (-20, 2), (18, 0), (16, 16), (5, -18), (-5, 16), (-7, 0), (7, -2), (-12, -6), (2, -3), (12, 2), (1, -6), (-13, 2), (2, 2), (-2, -2), (-1, -2), (-6, -8), (6, 4), (-8, -6), (-8, 12), (-18, 3), (-20, -3), (-4, 18), (6, -14), (-6, 14), (2, -12), (-2, 8), (4, -16), (-4, 8), (11, 20), (-16, -17), (0, -2), (-16, 14), (2, -18), (-2, 18), (-1, 18), (-10, 20), (12, -12), (-12, 12), (-14, 12),(14, -16), (10, -14), (-10, 14), (16, 14), (6, 17), (8, -16), (7, 20), (-8, 19), (-20, -12), (-18, 10), (-18, -16), (18, 12), (-20, 14), (-7, 18), (18, -10), (8, 10), (6, -11), (16, -4), (-6, 9), (5, -6), (-10, -4), (10, 0), (8, 16), (-4, 7), (1, -12), (-14, -10), (-16, 5), (-12, -10), (12,14), (14, 10), (13, -18), (-13, 16), (15, -2), (1, -18), (2, 20), (-12, 11), (-16, -4), (14, -5), (0, 12), (-14, 7), (-11, 10), (4, 2), (-4, -6),(-2, -14), (-1, -14), (10, -3), (2, 14), (-9, 4), (16, 5), (-6, -12), (6, 8), (-19, -18), (17, 0), (-20, -13), (-18, 13), (-20, 5), (-8, -18), (18, 7), (-17, 8), (-6, 16), (-8, 0), (10, 11), (-11, -4), (11, 2), (-14, -15), (-15, -10), (15, 8), (-12, 18), (0, 3), (-16, -13), (-16, 18), (3, 14), (1, 2), (4, 9), (2, 9), (-5, -14), (5, 12), (6, 3), (8, -2), (-4, -17), (-18, 20), (16, 18), (-7, 6), (6, -7), (14, 20), (-2, 7), (1, -8), (0,-7), (-13, 4), (-15, 20), (2, 0), (-1, -4), (-2, -4), (-11, 6)}

moves = [3, 3, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 4, 4, 4, 4, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 4, 4, 4, 4, 4, 4, 2, 2, 4, 4, 1, 1, 4, 4, 1, 1, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 2, 2, 2, 2, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 1, 1, 3, 3, 1, 1, 4, 4, 4, 4, 4, 4, 2, 2, 3, 3, 2, 2, 2, 2, 4, 4, 1, 1, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 2, 2, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 1, 1, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 2, 2, 3, 3, 1, 1, 1, 1, 4, 4, 4, 4, 1, 1, 3, 3, 1, 1, 1, 1, 3, 3, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 3, 3, 3, 3, 1, 1, 1, 1, 3, 3, 1, 1, 3, 3, 2, 2, 3, 3, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2]

# walls, clear area, and move list obtained from part 1 (fully exploring; not stopping at status code 2)

move(3, 0, 0)
for i in range(1, len(moves)):
  move(moves[i], 249, 0)
recur(-14, -12, 249, 0, 0, -1)
print(time)