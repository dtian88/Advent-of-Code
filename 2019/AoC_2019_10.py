data = ['.#.####..#.#...#...##..#.#.##.',
'..#####.##..#..##....#..#...#.',
'......#.......##.##.#....##..#',
'..#..##..#.###.....#.#..###.#.',
'..#..#..##..#.#.##..###.......',
'...##....#.##.#.#..##.##.#...#',
'.##...#.#.##..#.#........#.#..',
'.##...##.##..#.#.##.#.#.#.##.#',
'#..##....#...###.#..##.#...##.',
'.###.###..##......#..#...###.#',
'.#..#.####.#..#....#.##..#.#.#',
'..#...#..#.#######....###.....',
'####..#.#.#...##...##....#..##',
'##..#.##.#.#..##.###.#.##.##..',
'..#.........#.#.#.#.......#..#',
'...##.#.....#.#.##........#..#',
'##..###.....#.............#.##',
'.#...#....#..####.#.#......##.',
'..#..##..###...#.....#...##..#',
'...####..#.#.##..#....#.#.....',
'####.#####.#.#....#.#....##.#.',
'#.#..#......#.........##..#.#.',
'#....##.....#........#..##.##.',
'.###.##...##..#.##.#.#...#.#.#',
'##.###....##....#.#.....#.###.',
'..#...#......#........####..#.',
'#....#.###.##.#...#.#.#.#.....',
'.........##....#...#.....#..##',
'###....#.........#..#..#.#.#..',
'##...#...###.#..#.###....#.##.']

global_maximum = 0
best = (-1, -1)
above = below = left = right = False
slopes = set()
for i in range(len(data)):
  for j in range(len(data[i])):
    maximum = 0
    above = below = left = right = False
    slopes = set()
    if data[i][j] == '#':
      for k in range(len(data)):
        for l in range(len(data[k])):
          if data[k][l] == '#' and (i != k or j != l):
            if j == l:
              if i > k and not above:
                maximum += 1
                above = True
              elif i < k and not below:
                maximum += 1
                below = True
            elif i == k:
              if j > l and not left:
                maximum += 1
                left = True
              elif j < l and not right:
                maximum += 1
                right = True
            else:
              slope = (j - l) / (i - k)
              check = i < k
              if (slope, check) not in slopes:
                slopes.add((slope, check))
                maximum += 1
      if maximum > global_maximum:
        global_maximum = maximum
        best = (j, i)
print(global_maximum, best)